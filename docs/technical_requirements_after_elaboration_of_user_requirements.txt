TECHNICAL REQUIREMENTS BASED ON SIMPLE USER REQUIREMENTS
v0.1

The command line user interface must:
1. Allow users to execute one line commands to perform a certain action.
2. Provide a help output in case a user forgets on how to perform a
certain operation.


STRUCTURE OF INFORMATION DATA
Abstract view of structure:
A user can create a named budget and it can contain a set of named topics.
The topics represent certain parts of a budget and each one of them
will have a monetary limit, where a certain amount of money is allowed
to be spent for (thus tracking how much a user has spent so far).
Also the budget will have a period type to indicate how often the limits
can be reset (i.e. either weekly or monthly).

Technical view:
Budget Structure
The data structure will be represented as a class with its own methods.
Class will called 'Budget' will represent as an overall container
structure that will contain different attributes:
budget_name -- to describe a budget
topics -- a dictionary that will contain topics, their respective
          limits and other related attributes.
reset_period_type -- a key value to indiciate how often to reset the
          limits.
budget_date_object -- a BudgetDate object to indicate creation date of a
                      budget.
reset_date -- a date to indicate when topics were reset. If the
              budget has just been created, then it will have the same
              date as the creation one.
move_leftover -- a boolean to indicate whether to carry over left over
                 to a next period of topic's limit (thus increasing it)
                 or not.

Topic Structure
Topic structure will be a dictionary structure to contain certain
attributes:
current_spending -- a current amount of money to spent so far.
limit -- a monetary limit where a money spending can't go over it.
topic_name -- to describe topic.
original_limit -- a variable to contain original limit if move_leftover
is set to true, so if the limit has been reached or over reached, the
value can be assigned to limit.

Storing/Saving the data structure.
Since the data will be stored in a class, a certain class parser should
be able to convert it and store it in a file. Thus it's possible to
use the same parser to do restoring of it.

ARCHITECTURAL STRUCTURE
This is a list of modules that will exist to make up the whole program:
- constants
- input_user_interface
- output_user_interface
- request_processor
- Budget class
- BudgetDate class
- file_and_dir_operations
- budtrack

constants module:
+ it will contain certain constants that will be used throughout the
program to keep user's input arguments consistent.

input_user_interface module:
+ it's responsible for presenting command line options to the user.
+ it parses user's input into a dictionary, which will be used by
request_processor.
+ it uses docopt to do the above.
+ also it will contain a set of functions that will be responsible for
getting user's input during budget operations.

output_user_interface module:
+ it's responsible for making output messages for the user to see.
+ it has functions that are specified based on each function in
request_processor.
+ certain values need to be passed to the functions for hiding Budget's
public interface.

request_processor module:
+ it contains a function that decides what to do with the input.
+ it contains a set of functions to perform small tasks that will make
the whole user request.
+ it uses Budget class's functions to perform a certain operation
based on a user's input.

Budget class module:
+ it contains functions that perform different budget-related
operations, which are based upon user's requirements.
+ the functions will use an Exception class to throw an error when
functions discover it. budtrack module should catch them and report
them to the user.

BudgetDate class module:
+ it contains functions to perform time operations.
+ it contains information abuot budget's creation and reset dates.

file_and_dir_operations module:
+ it contains functions responsible for performing file and directory
operations.
+ it will contain functions that will save or get class data from files.
+ it will contain a function that will create a directory to contain
all budget files.

budtrack module:
+ it is a main function that needs to be run and passed with arguments
to perform a certain operation.

ERROR HANDLING IN PERFORMING BUDGET'S OPERATIONS
A function, which is responsible for deciding which request to execute
according to user input and it's within request_processor, will have a
try and catch block that will capture generic exceptions to display
errors to the user. The exceptions will be made by public or private
functions in Budget class, so when a budget operation encounters a
problem, it can generate an appropriate error when it has variables and
values at hand. Thus other operations that are performed by a top-level
function in request_processor module are not affected by these
exceptions.

OUTPUT TO THE USERS
The way it will work is that a function from request_processor will
pass certain values (i.e. some budget's attributes or/and user's
arguments) to generate an appropriate message for a particular
operation.

USER INTERACTION WHEN DANGEROUS FUNCTIONS ARE PERFORMING
The user interaction happens at request_processor's functions for two
reasons:
1. input_user_interface is responsible for taking a user's input.
2. Certain operation functions are easy to identify to know where to
edit implementation of such interaction.
3. Budget class is a container of data and its functions wouldn't be
cohesive with the purpose if it interacted with the user.
